// Generated by gencpp from file swarm_control_package/NewTargetRequest.msg
// DO NOT EDIT!


#ifndef SWARM_CONTROL_PACKAGE_MESSAGE_NEWTARGETREQUEST_H
#define SWARM_CONTROL_PACKAGE_MESSAGE_NEWTARGETREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace swarm_control_package
{
template <class ContainerAllocator>
struct NewTargetRequest_
{
  typedef NewTargetRequest_<ContainerAllocator> Type;

  NewTargetRequest_()
    : id(0)
    , drone_name()  {
    }
  NewTargetRequest_(const ContainerAllocator& _alloc)
    : id(0)
    , drone_name(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _id_type;
  _id_type id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _drone_name_type;
  _drone_name_type drone_name;





  typedef boost::shared_ptr< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NewTargetRequest_

typedef ::swarm_control_package::NewTargetRequest_<std::allocator<void> > NewTargetRequest;

typedef boost::shared_ptr< ::swarm_control_package::NewTargetRequest > NewTargetRequestPtr;
typedef boost::shared_ptr< ::swarm_control_package::NewTargetRequest const> NewTargetRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::swarm_control_package::NewTargetRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::swarm_control_package::NewTargetRequest_<ContainerAllocator1> & lhs, const ::swarm_control_package::NewTargetRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.drone_name == rhs.drone_name;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::swarm_control_package::NewTargetRequest_<ContainerAllocator1> & lhs, const ::swarm_control_package::NewTargetRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace swarm_control_package

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1712d6c3933db4cf57fb1ad545ce3c20";
  }

  static const char* value(const ::swarm_control_package::NewTargetRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1712d6c3933db4cfULL;
  static const uint64_t static_value2 = 0x57fb1ad545ce3c20ULL;
};

template<class ContainerAllocator>
struct DataType< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "swarm_control_package/NewTargetRequest";
  }

  static const char* value(const ::swarm_control_package::NewTargetRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 id\n"
"#geometry_msgs/Point position\n"
"string drone_name\n"
;
  }

  static const char* value(const ::swarm_control_package::NewTargetRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.drone_name);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NewTargetRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::swarm_control_package::NewTargetRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::swarm_control_package::NewTargetRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.id);
    s << indent << "drone_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.drone_name);
  }
};

} // namespace message_operations
} // namespace ros

#endif // SWARM_CONTROL_PACKAGE_MESSAGE_NEWTARGETREQUEST_H
